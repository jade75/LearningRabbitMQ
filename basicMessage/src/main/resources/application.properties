spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=123456
spring.rabbitmq.virtualHost=/
#spring.rabbitmq.connection-timeout=1500
#spring.rabbitmq.listener.simple.concurrency=5
#spring.rabbitmq.listener.simple.max-concurrency=10



#开启 confirm 确认机制
#spring.rabbitmq.publisher-confirms=true
#发送确认
spring.rabbitmq.publisher-confirm-type=correlated

#开启 return 确认机制
spring.rabbitmq.publisher-returns=true

#当mandatory标志位设置为true时，如果exchange根据自身类型和消息routingKey无法找到一个合适的queue存储消息，那么broker会调用basic.return方法将消息返还给生产者;
# 当mandatory设置为false时，出现上述情况broker会直接将消息丢弃;
#通俗的讲，mandatory标志告诉broker代理服务器至少将消息route到一个队列中，否则就将消息return给发送者
spring.rabbitmq.template.mandatory=true

#ack手动确认
#spring.rabbitmq.listener.simple.acknowledge-mode=auto
spring.rabbitmq.listener.simple.acknowledge-mode=manual

# 最大重试次数
spring.rabbitmq.listener.simple.retry.max-attempts=2
# 是否开启消费者重试
spring.rabbitmq.listener.simple.retry.enabled=true
# 重试间隔时间(毫秒）
spring.rabbitmq.listener.simple.retry.initial-interval=3000
# 重试次数超过上面的设置之后是否丢弃（false不丢弃时需要写相应代码将该消息加入死信队列）
spring.rabbitmq.listener.simple.default-requeue-rejected=false





mq.env=local

#basic with string
mq.basic.info.queue.name=${mq.env}.middleware.mq.basic.info.queue
mq.basic.info.exchange.name=${mq.env}.middleware.mq.basic.info.exchange
mq.basic.info.routing.key.name=${mq.env}.middleware.mq.basic.info.routing.key
#basic with object
mq.object.info.queue.name=${mq.env}.middleware.mq.object.info.queue
mq.object.info.exchange.name=${mq.env}.middleware.mq.object.info.exchange
mq.object.info.routing.key.name=${mq.env}.middleware.mq.object.info.routing.key


#fanout
mq.fanout.queue.one.name=${mq.env}.middleware.mq.fanout.one.queue
mq.fanout.queue.two.name=${mq.env}.middleware.mq.fanout.two.queue
mq.fanout.exchange.name=${mq.env}.middleware.mq.fanout.exchange


#direct
mq.direct.exchange.name=${mq.env}.middleware.mq.direct.exchange
mq.direct.routing.key.one.name=${mq.env}.middleware.mq.direct.routing.key.one
mq.direct.routing.key.two.name=${mq.env}.middleware.mq.direct.routing.key.two
mq.direct.queue.one.name=${mq.env}.middleware.mq.direct.one.queue
mq.direct.queue.two.name=${mq.env}.middleware.mq.direct.two.queue


#topic
mq.topic.exchange.name=${mq.env}.middleware.mq.topic.exchange
mq.topic.queue.one.name=${mq.env}.middleware.mq.topic.one.queue
mq.topic.queue.two.name=${mq.env}.middleware.mq.topic.two.queue

mq.topic.routing.key.one.name=${mq.env}.middleware.mq.topic.routing.*.key
mq.topic.routing.key.two.name=${mq.env}.middleware.mq.topic.routing.#.key


#auto knowledge
mq.auto.knowledge.queue.name=${mq.env}.middleware.auto.knowledge.queue
mq.auto.knowledge.exchange.name=${mq.env}.middleware.auto.knowledge.exchange
mq.auto.knowledge.routing.key.name=${mq.env}.middleware.auto.knowledge.routing.key

# knowledge manual
mq.manual.knowledge.queue.name=${mq.env}.middleware.manual.knowledge.queue
mq.manual.knowledge.exchange.name=${mq.env}.middleware.manual.knowledge.exchange
mq.manual.knowledge.routing.key.name=${mq.env}.middleware.manual.knowledge.routing.key


#dead queue
mq.dead.queue.name=${mq.env}.middleware.dead.queue
mq.dead.exchange.name=${mq.env}.middleware.dead.exchange
mq.dead.routing.key.name=${mq.env}.middleware.dead.routing.key

mq.producer.basic.exchange.name=${mq.env}.middleware.producer.basic.exchange

mq.producer.basic.routing.key.name=${mq.env}.middleware.producer.basic.routing.key

mq.consumer.real.queue.name=${mq.env}.middleware.consumer.real.queue
